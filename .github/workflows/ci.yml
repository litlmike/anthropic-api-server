# GitHub Actions Best Practice Workflow Template
# 
# This template is based on Context7 documentation and Docker best practices
# Designed specifically for QNAP Container Station deployments
# 
# Features:
# - Creates immutable tags with date-SHA format (e.g., 2025.08.20-fc4ac4f)
# - Eliminates QNAP caching issues by avoiding :latest tags
# - Uses GitHub Container Registry (GHCR) for reliable image storage
# - Follows 2025 GitHub Actions security and performance standards
# 
# Usage:
# 1. Copy this file to .github/workflows/build-and-deploy.yml in your repo
# 2. Ensure your repo has a Dockerfile in the root
# 3. Push to main branch to trigger the workflow
# 4. Copy the generated tag from Actions output to your docker-compose.yml
# 
# Last Updated: September 2025
# Source: Context7 MCP documentation + Docker official docs

name: Build and Push to GHCR

# Trigger Configuration
# Only runs on pushes to main branch - keeps it simple and predictable
on:
  push:
    branches: [main]
  # Optional: Add workflow_dispatch for manual triggering
  workflow_dispatch:

# Global Environment Variables
# Uses dynamic repository name for reusability across projects
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # Automatically uses owner/repo-name

jobs:
  build:
    runs-on: ubuntu-latest
    
    # Required permissions for GHCR access
    permissions:
      contents: read      # Read repository contents
      packages: write     # Write to GitHub Container Registry
      id-token: write     # Required for attestations

    steps:
      # Step 1: Checkout code
      # Updated to v4 (v3 is deprecated as of 2025)
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (recommended best practice)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Login to GitHub Container Registry
      # Uses built-in GITHUB_TOKEN for authentication (no PAT needed)
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}          # Your GitHub username
          password: ${{ secrets.GITHUB_TOKEN }}  # Built-in token

      # Step 4: Generate metadata and tags
      # This is the key step that creates the QNAP-compatible tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Creates date-SHA format: 2025.08.20-fc4ac4f
            # This format is immutable and QNAP-friendly
            type=raw,value={{date 'YYYY.MM.DD'}}-{{sha}}
            
            # Alternative tag formats (uncomment if needed):
            # type=ref,event=branch,suffix=-{{sha}}     # Creates: main-fc4ac4f
            # type=semver,pattern={{version}}           # Creates: 1.0.0 (for tagged releases)
          
          # Flavor configuration - prevents :latest tag creation
          flavor: |
            latest=false  # Explicitly disable :latest tag to avoid QNAP caching issues

      # Step 5: Build and push Docker image
      # Updated to v6 (v5 is older, v6 has performance improvements)
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .                              # Build from repository root
          push: true                              # Push to registry
          tags: ${{ steps.meta.outputs.tags }}   # Use generated tags
          labels: ${{ steps.meta.outputs.labels }} # Add OCI labels
          # build-args: |
            # Add any Docker build arguments here if needed
            # For this Python API server, no build args are required
          
          # Optional: Add for better performance
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          
          # Optional: Multi-platform builds
          # platforms: linux/amd64,linux/arm64

      # Step 6: Display deployment information with enhanced visibility
      # Creates prominent notices and summary for easy tag identification
      - name: Show tag for QNAP deployment
        run: |
          echo "ðŸš€ Image built and pushed!"
          echo "ðŸ“‹ Copy this tag for your docker-compose.yml:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "::notice title=QNAP Deployment Tag::${{ steps.meta.outputs.tags }}"
          echo ""
          echo "## ðŸš€ QNAP Deployment Ready!" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your docker-compose.yml with the tag above" >> $GITHUB_STEP_SUMMARY
          echo "2. Run: \`docker-compose pull && docker-compose up -d\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag Location Tips:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Summary**: Check the summary at the top of this page" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Packages**: Go to repository â†’ Packages â†’ Select your package" >> $GITHUB_STEP_SUMMARY
          echo "- **This Step Output**: Expand this step to see the tag details" >> $GITHUB_STEP_SUMMARY