name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for dependency security checks
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

# Cancel redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Global permissions - least privilege principle
permissions:
  contents: read
  packages: write
  security-events: write # For security scanning results
  id-token: write # For OIDC token generation
  attestations: write # For build attestations

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Only test the environment that matches your Docker container
        os: [ubuntu-latest]
        python-version: ['3.11']
        include:
          # Optional: Test one additional recent version for future-proofing
          - os: ubuntu-latest
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          **/requirements*.txt
        check-latest: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pip install pytest pytest-asyncio httpx
        pytest --version
        pytest -v

    - name: Run API integration tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Start API server in background
        python main.py &
        SERVER_PID=$!
        sleep 10
        
        # Run full integration tests with real API
        python test_api.py http://localhost:8000
        
        # Clean up
        kill $SERVER_PID || true
      if: matrix.python-version == '3.11'

  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pip install pytest pytest-asyncio httpx
        pytest

    - name: Build Docker image
      run: |
        docker build -t anthropic-api-server:latest .

    - name: Test Docker image
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        docker run --rm -d --name test-container -p 8000:8000 -e ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY" anthropic-api-server:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

    - name: Generate basic attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'Dockerfile'

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/anthropic-api-server
        tags: |
          # Branch-based tags
          type=ref,event=branch
          type=ref,event=pr
          # Semantic versioning tags
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # SHA-based tags for traceability
          type=sha,prefix={{branch}}-
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Edge tag for development
          type=edge,branch=main
        labels: |
          org.opencontainers.image.title=Anthropic API Server
          org.opencontainers.image.description=Production-ready Anthropic API client server
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
        flavor: |
          latest=auto
          prefix=
          suffix=

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true
        
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/anthropic-api-server
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security scanner
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          trivy-results.sarif

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/github
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/git

    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/pkgs/container/anthropic-api-server
    
    steps:
    - name: Deployment notification
      run: |
        echo "ðŸš€ Docker image successfully built and pushed to GHCR"
        echo "ðŸ“¦ Image: ghcr.io/${{ github.repository_owner }}/anthropic-api-server:latest"
        echo "ðŸ”— Registry: https://github.com/${{ github.repository }}/pkgs/container/anthropic-api-server"
        echo "âœ… Ready for QNAP deployment"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, docker, security, release, deploy]
    if: always()

    steps:
    - name: Cleanup workflow artifacts
      run: |
        echo "ðŸ§¹ Workflow completed. Cleaning up artifacts..."
        echo "ðŸ“Š Workflow status: ${{ job.status }}"
        # Add any cleanup logic here if needed
